<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 缓存管理器 -->
    <bean id="cacheManager" class="com.cmhb.common.shiro.cache.ShiroSpringCacheManager">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.cmhb.common.shiro.realm.UserRealm">
        <!--开发 使用永真密码匹配器-->
        <property name="credentialsMatcher">
            <!--<bean class="org.apache.shiro.authc.credential.AllowAllCredentialsMatcher"/>-->
            <ref bean="credentialsMatcher"/>
        </property>
        <!--<property name="credentialsMatcher" ref="credentialsMatcher"/>-->
        <!--启用缓存，默认false-->
        <property name="cachingEnabled" value="true"/>
        <!--缓存AuthenticationInfo信息，默认false-->
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!--缓存AuthorizationInfo信息，默认false-->
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="path" value="/"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="path" value="/"/>
        <property name="maxAge" value="#{60 * 60 * 24 * 15}"/><!-- 15天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <!--可以省略.SecurityManager设置cacheManager，会自动注入实现了CacheManagerAware接口的对象-->
        <!--<property name="cacheManager" ref="shiroSpringCacheManager"/>-->
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="#{1000 * 60 * 30}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="#{14 * 24 * 60 * 60 * 1000}"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="userFilter" class="com.cmhb.common.shiro.filter.authc.UserFilter"/>
    <bean id="logout" class="com.cmhb.common.shiro.filter.authc.LogoutFilter"/>
    <bean id="restAuthenticationFilter" class="com.cmhb.common.shiro.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="loginName"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="com.cmhb.common.shiro.filter.SpringRestShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="restAuthenticationFilter"/>
                <entry key="user" value-ref="userFilter"/>
            </util:map>
        </property>
        <property name="annoymousResources">
            <list>
                <value>/info</value>
                <value>/css/**</value>
                <value>/iconfont/**</value>
                <value>/images/**</value>
                <value>/js/**</value>
                <value>/plug/**</value>
                <!--OAuth2认证授权接口-->
                <value>/authorize</value>
                <value>/accessToken</value>
                <value>/function/client/user/functions.htm</value>
                <value>/function/client/urlPathExpressions.htm</value>
                <value>/function/addActionUri.htm</value>
                <value>/userInfo</value>
                <value>/user/menuPerms</value>
                <value>/all/menuPerms</value>
                <value>/revokeoauth2</value>
                <value>/authc/user</value>
                <value>/oauth/authorize</value>
                <value>/oauth/local/authorize</value>
                <value>/oauth/login</value>
                <value>/oauth/index</value>
                <value>/oauth/logoutPage</value>

                <value>/error</value>
            </list>
        </property>
    </bean>

    <aop:aspectj-autoproxy/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
        使用MD5 OAuthIssuer, 生成随机值,如 access_token, refresh_token
        可根据需要扩展使用其他的实现
    -->
    <bean id="oAuthIssuer" class="org.apache.oltu.oauth2.as.issuer.OAuthIssuerImpl">
        <constructor-arg>
            <bean class="org.apache.oltu.oauth2.as.issuer.MD5Generator"/>
        </constructor-arg>
    </bean>

</beans>